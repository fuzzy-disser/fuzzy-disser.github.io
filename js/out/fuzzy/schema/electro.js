// Compiled by ClojureScript 0.0-2850 {}
goog.provide('fuzzy.schema.electro');
goog.require('cljs.core');
goog.require('fuzzy.fzlogic');
fuzzy.schema.electro.human_factor = (function human_factor(vars){
var map__9923 = vars;
var map__9923__$1 = ((cljs.core.seq_QMARK_(map__9923))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9923):map__9923);
var map__9924 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9923__$1,cljs.core.constant$keyword$37);
var map__9924__$1 = ((cljs.core.seq_QMARK_(map__9924))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9924):map__9924);
var x3 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9924__$1,cljs.core.constant$keyword$21);
var x3_w = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9924__$1,cljs.core.constant$keyword$22);
var map__9925 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9923__$1,cljs.core.constant$keyword$24);
var map__9925__$1 = ((cljs.core.seq_QMARK_(map__9925))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9925):map__9925);
var x4 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9925__$1,cljs.core.constant$keyword$21);
var x4_w = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9925__$1,cljs.core.constant$keyword$22);
var map__9926 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9923__$1,cljs.core.constant$keyword$26);
var map__9926__$1 = ((cljs.core.seq_QMARK_(map__9926))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9926):map__9926);
var x7 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9926__$1,cljs.core.constant$keyword$21);
var x7_w = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9926__$1,cljs.core.constant$keyword$22);
return fuzzy.fzlogic.or.cljs$core$IFn$_invoke$arity$variadic((x3 * x3_w),cljs.core.array_seq([(x4 * x4_w),(x7 * x7_w)], 0));
});
fuzzy.schema.electro.electro_station = (function electro_station(vars){
var map__9932 = vars;
var map__9932__$1 = ((cljs.core.seq_QMARK_(map__9932))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9932):map__9932);
var map__9933 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9932__$1,cljs.core.constant$keyword$38);
var map__9933__$1 = ((cljs.core.seq_QMARK_(map__9933))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9933):map__9933);
var y3 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9933__$1,cljs.core.constant$keyword$21);
var y3_w = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9933__$1,cljs.core.constant$keyword$22);
var map__9934 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9932__$1,cljs.core.constant$keyword$28);
var map__9934__$1 = ((cljs.core.seq_QMARK_(map__9934))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9934):map__9934);
var y2 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9934__$1,cljs.core.constant$keyword$21);
var y2_w = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9934__$1,cljs.core.constant$keyword$22);
var map__9935 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9932__$1,cljs.core.constant$keyword$29);
var map__9935__$1 = ((cljs.core.seq_QMARK_(map__9935))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9935):map__9935);
var y1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9935__$1,cljs.core.constant$keyword$21);
var y1_w = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9935__$1,cljs.core.constant$keyword$22);
var map__9936 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9932__$1,cljs.core.constant$keyword$32);
var map__9936__$1 = ((cljs.core.seq_QMARK_(map__9936))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9936):map__9936);
var y6 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9936__$1,cljs.core.constant$keyword$21);
var y6_w = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9936__$1,cljs.core.constant$keyword$22);
return fuzzy.fzlogic.and.cljs$core$IFn$_invoke$arity$variadic(fuzzy.fzlogic.and.cljs$core$IFn$_invoke$arity$variadic((y3 * y3_w),cljs.core.array_seq([(y2 * y2_w),(y1 * y1_w)], 0)),cljs.core.array_seq([(y6 * y6_w)], 0));
});
fuzzy.schema.electro.environment = (function environment(vars){
var map__9942 = vars;
var map__9942__$1 = ((cljs.core.seq_QMARK_(map__9942))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9942):map__9942);
var map__9943 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9942__$1,cljs.core.constant$keyword$33);
var map__9943__$1 = ((cljs.core.seq_QMARK_(map__9943))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9943):map__9943);
var z1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9943__$1,cljs.core.constant$keyword$21);
var z1_w = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9943__$1,cljs.core.constant$keyword$22);
var map__9944 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9942__$1,cljs.core.constant$keyword$35);
var map__9944__$1 = ((cljs.core.seq_QMARK_(map__9944))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9944):map__9944);
var z3 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9944__$1,cljs.core.constant$keyword$21);
var z3_w = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9944__$1,cljs.core.constant$keyword$22);
var map__9945 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9942__$1,cljs.core.constant$keyword$39);
var map__9945__$1 = ((cljs.core.seq_QMARK_(map__9945))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9945):map__9945);
var z5 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9945__$1,cljs.core.constant$keyword$21);
var z5_w = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9945__$1,cljs.core.constant$keyword$22);
var map__9946 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9942__$1,cljs.core.constant$keyword$36);
var map__9946__$1 = ((cljs.core.seq_QMARK_(map__9946))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9946):map__9946);
var z4 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9946__$1,cljs.core.constant$keyword$21);
var z4_w = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9946__$1,cljs.core.constant$keyword$22);
return fuzzy.fzlogic.and.cljs$core$IFn$_invoke$arity$variadic(fuzzy.fzlogic.and.cljs$core$IFn$_invoke$arity$variadic((z1 * z1_w),cljs.core.array_seq([(z3 * z3_w),(z5 * z5_w)], 0)),cljs.core.array_seq([(z4 * z4_w)], 0));
});
